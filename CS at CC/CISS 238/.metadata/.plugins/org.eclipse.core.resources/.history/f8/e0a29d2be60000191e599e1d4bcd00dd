package shoppingCart;

/* Sterling L
 * Final Project, Shopping Cart GUI
 * 
 * This program displays a basic shopping cart interface for
 * a bookstore. The user can select a book from a list, and add it to 
 * the cart list, or remove a selection from their cart. They can also
 * clear the cart, or check out to get a receipt printed to file
 */

//imports
import javafx.application.Application;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.layout.VBox;
import javafx.scene.layout.HBox;
import javafx.geometry.Pos;
import javafx.geometry.Insets;
import javafx.scene.control.Label;
import javafx.scene.control.Button;
import javafx.scene.control.ListView;
import javafx.scene.control.SelectionMode;
import javafx.collections.ObservableList;
import javafx.collections.FXCollections;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
//for the date
import java.text.SimpleDateFormat;



public class ShoppingCart extends Application
{
   /* ArrayList to hold info from the BookPrices.txt file, cart information
    * and other required variables
    */
	String[] bookTitles = new String[20];//array of the book names 
	double[] bookPrices = new double[20];//array of the book prices
	double[] cartPrices = new double[100];//using this to keep track of the prices for items in the cart
	private double sub = 0;//values for the user
	private double taxes = 0;
	private double total = 0;
	
   public static void main(String[] args)
   {
      // Launch the application.
      launch(args);
   }
   
   
   // start method entry point of the application
   @Override
   	public void start(Stage primaryStage)
   	{
	   try {
	   readBookFile();
	   }
	   catch(IOException e1)
	   {
		   System.out.print("file not found");
	   }
	   
	   // Build the inventory ArrayLists
	  // Convert the inventoryTtitles ArrayList to an ObservableList.		
		ObservableList<String> bookList =
				FXCollections.observableArrayList(bookTitles);
		// Create a ListView control.
		ListView<String> booksList = new ListView<>(bookList);
      
		ObservableList<String> cartList = 
				FXCollections.observableArrayList();
		
      // Build the Shopping Cart ListView
		ListView<String> cartView = new ListView<>(cartList);	
		
      // Create the output label for the cart subtotal.
      Label subTotal = new Label("Sub-Total: " + sub);
      // Create the output label for the tax.
      Label Taxes = new Label("Tax: " + taxes);
      // Create the output label for the cart total.
      Label cartTotal = new Label("Total: " + total);
      
      //list labels
      Label inventoryLabel = new Label("Pick a Book");
      Label cartLabel = new Label("Shopping Cart");
      
      // Add To Cart Button
      Button addToCartButton = new Button("Add To Cart");
      addToCartButton.setOnAction(e ->
      {
         // Get the selected index.
         int index = booksList.getSelectionModel().getSelectedIndex();
         // Add the item to the cart.
         if (index != -1)
         {
            // Update the cart ArrayLists
            cartList.add(booksList.getItems().get(index));
            // Update the cartListView
            cartPrices[index] = bookPrices[index];
           
            // Update the subtotal
            sub += bookPrices[index];
            
            System.out.println(cartPrices[index]);
         }
      });
      
      // Remove From Cart Button
      Button removeFromCartButton = new Button("Remove From Cart");
      removeFromCartButton.setOnAction(e ->
      {
         // Get the selected index.
    	  int cartIndex = cartView.getSelectionModel().getSelectedIndex();
    	  
    	  /*int index = 0;
    	  while(index < bookList.size()) {
    		  if(cartList.get(cartIndex).equals(bookList.get(index)))
    			  break;
    		  index++;
    	  }
         // remove from the cart.
         if (index != -1)
         {
           */ // Update the subtotal
    	  System.out.println(cartPrices[cartIndex]);
            sub -= cartPrices[cartIndex];
            // Remove the selected item from the cart ArrayLists
            cartList.remove(cartIndex);
            // Update the cartListView
         
      });
      
      // Clear Cart Button
      Button emptyCartButton = new Button("Clear Cart");
      emptyCartButton.setOnAction(e ->
      {
         // Update the subtotal
         sub = 0;
         // Clear the cart ArrayLists
         cartList.clear();
         // Update the cartListView
      });
      
      // Checkout Button
      Button checkoutButton = new Button("Checkout");
      checkoutButton.setOnAction(e ->
      {
         final double TAX_RATE = 0.07;
         
         // Calculate the tax
         taxes = sub * TAX_RATE;
         // Calculate the total
         total = sub + taxes;
         
         //setup dates
         String timeStamp = new SimpleDateFormat("MM-DD-YYYY HH:mm:ss").format(Calendar.getInstance().getTime());
         String fntimeStamp = new SimpleDateFormat("MM-DD-YYYY.HH.mm.ss").format(Calendar.getInstance().getTime());
         
         //create and open receipt file
         String filename = "Receipt-"+fntimeStamp+".txt"; 
         try {
        	   //open file
			   PrintWriter receiptFile = new PrintWriter("src/shoppingCart/"+filename);
			   
			   //create the receipt
			   receiptFile.println("Receipt: " + timeStamp);
			   receiptFile.println("Title				Price");
			   receiptFile.println("-----------------		-----");
			   
			   int x = 0;
			   while(x < cartList.size()) {
				   receiptFile.println(cartList.get(x) + "		" + cartPrices[x]);
				   x++;
			   }
			   
			   receiptFile.printf("Sub Total:			%.2f", sub);
			   receiptFile.println();
			   receiptFile.printf("Tax:				%.2f", taxes);
			   receiptFile.println();
			   receiptFile.printf("Grand Total:			%.2f", total);
			   
			   
	           //close the file
	           receiptFile.close();
         } catch (FileNotFoundException e1) {
		   	  e1.printStackTrace();
              System.out.println("file open error"); 
		}
         
      });
      
      
      // Build the VBox to hold the Add button
      VBox addButton = new VBox(addToCartButton);
      // Build the VBox to hold the cart buttons
      VBox cartButtons = new VBox(10, removeFromCartButton, emptyCartButton, checkoutButton);
      
      // Box to hold the middle part of the GUI
      HBox lists = new HBox(30, booksList, addButton, cartView, cartButtons);
      // Build the top part of the GUI
      HBox titles = new HBox(350, inventoryLabel, cartLabel);
      // Build the bottom part of the GUI
      VBox priceLabels = new VBox(subTotal, Taxes, cartTotal);
      //Vbox priceValues = new VBox(sub, taxes, total);
    			
      // Put everything into a VBox
      VBox layout = new VBox(20, titles, lists, priceLabels);
      // Add the main VBox to a scene.
      Scene scene = new Scene(layout);
      // Set the scene to the stage and display it.
      primaryStage.setScene(scene);
      primaryStage.show();
      
   }
   
   private void readBookFile() throws IOException
   {
      String input;  // To hold a line from the file
      
      // Open the file.
      File file = new File("src/shoppingCart/BookPrices.txt");
      Scanner inFile = new Scanner(file);
      int x = 0;
      // Read the file.
      while (inFile.hasNext())
      {
         input = inFile.nextLine();
         
         // Tokenize the line.
         String[] tokens = input.split(", ");
         
         // Add the book info to the ArrayLists.
 			bookTitles[x] = tokens[0];
 			bookPrices[x] = Double.parseDouble(tokens[1]);
 			x++;
      }
      
      // Close the file.
      inFile.close();
   }
}